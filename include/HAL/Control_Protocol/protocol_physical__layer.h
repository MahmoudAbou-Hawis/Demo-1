/******************************************************************************/
/**
 * @file control_protocol_physical_layer.h
 * @brief Header File for Physical Layer of Control Protocol over UART
 *
 * @par Project Name
 * Embedded Control Protocol for UART
 *
 * @par Code Language
 * C
 *
 * @par Description
 * This header file declares the interface for the physical layer of the control 
 * protocol over UART. It provides function prototypes for initializing UART 
 * communication, sending data frames, and handling low-level UART operations 
 * to ensure reliable transmission of data packets. Users of the control 
 * protocol can include this header file to access the physical layer functions 
 * for UART communication.
 *
 * @par Author
 * Mahmoud Abou-Hawis
 *
 */
/******************************************************************************/

/******************************************************************************/
/* MULTIPLE INCLUSION GUARD */
/******************************************************************************/
#ifndef PROTOCOL_PHYSICAL_LAYER_H_
#define PROTOCOL_PHYSICAL_LAYER_H_
/******************************************************************************/

/******************************************************************************/
/* C++ Style GUARD */
/******************************************************************************/
#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
/******************************************************************************/

/******************************************************************************/
/* INCLUDES */
/******************************************************************************/
#include <stdint.h>
#include <stddef.h>
/******************************************************************************/

/******************************************************************************/
/* PUBLIC DEFINES */
/******************************************************************************/


/******************************************************************************/

/******************************************************************************/
/* PUBLIC MACROS */
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
/* PUBLIC ENUMS */
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
/* PUBLIC TYPES */
/******************************************************************************/


/******************************************************************************/

/******************************************************************************/
/* PUBLIC CONSTANT DECLARATIONS */
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
/* PUBLIC VARIABLE DECLARATIONS */
/******************************************************************************/


/******************************************************************************/

/******************************************************************************/
/* PUBLIC FUNCTION PROTOTYPES */
/******************************************************************************/

/**
 * @brief Initialize hardware for UART communication
 *
 * @param CallBack Callback function pointer to be called when UART communication is ready
 */
void HardWare_Init(void (*CallBack)(void));

/**
 * @brief Send data over UART
 *
 * @param data Pointer to the data buffer
 * @param len Length of the data to be sent
 */
void HardWare_Send(char * data, uint8_t len);

/**
 * @brief Receive data over UART
 *
 * @param data Pointer to the data buffer to store received data
 * @param len Length of the data to be received
 */
void HardWare_Receive(char * data, uint8_t len);

/******************************************************************************/

/******************************************************************************/
/* C++ Style GUARD */
/******************************************************************************/
#ifdef __cplusplus
}
#endif /* __cplusplus */
/******************************************************************************/

/******************************************************************************/
/* MULTIPLE INCLUSION GUARD */
/******************************************************************************/
#endif /* PROTOCOL_PHYSICAL_LAYER_H_ */
/******************************************************************************/
